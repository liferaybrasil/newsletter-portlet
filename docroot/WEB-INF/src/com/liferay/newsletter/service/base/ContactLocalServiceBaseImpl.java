/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.newsletter.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.newsletter.model.Contact;
import com.liferay.newsletter.service.CampaignLocalService;
import com.liferay.newsletter.service.ContactLocalService;
import com.liferay.newsletter.service.NewsletterLogLocalService;
import com.liferay.newsletter.service.SendCampaignLocalService;
import com.liferay.newsletter.service.persistence.CampaignPersistence;
import com.liferay.newsletter.service.persistence.ContactPersistence;
import com.liferay.newsletter.service.persistence.NewsletterLogPersistence;
import com.liferay.newsletter.service.persistence.SendCampaignPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the contact local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.newsletter.service.impl.ContactLocalServiceImpl}.
 * </p>
 *
 * @author Bruno Pinheiro
 * @see com.liferay.newsletter.service.impl.ContactLocalServiceImpl
 * @see com.liferay.newsletter.service.ContactLocalServiceUtil
 * @generated
 */
public abstract class ContactLocalServiceBaseImpl implements ContactLocalService,
	IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.newsletter.service.ContactLocalServiceUtil} to access the contact local service.
	 */

	/**
	 * Adds the contact to the database. Also notifies the appropriate model listeners.
	 *
	 * @param contact the contact to add
	 * @return the contact that was added
	 * @throws SystemException if a system exception occurred
	 */
	public Contact addContact(Contact contact) throws SystemException {
		contact.setNew(true);

		return contactPersistence.update(contact, false);
	}

	/**
	 * Creates a new contact with the primary key. Does not add the contact to the database.
	 *
	 * @param contactId the primary key for the new contact
	 * @return the new contact
	 */
	public Contact createContact(long contactId) {
		return contactPersistence.create(contactId);
	}

	/**
	 * Deletes the contact with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param contactId the primary key of the contact to delete
	 * @throws PortalException if a contact with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteContact(long contactId)
		throws PortalException, SystemException {
		contactPersistence.remove(contactId);
	}

	/**
	 * Deletes the contact from the database. Also notifies the appropriate model listeners.
	 *
	 * @param contact the contact to delete
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteContact(Contact contact) throws SystemException {
		contactPersistence.remove(contact);
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return contactPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return contactPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @param start the lower bound of the range of model instances to return
	 * @param end the upper bound of the range of model instances to return (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return contactPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Counts the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query to search with
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return contactPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Gets the contact with the primary key.
	 *
	 * @param contactId the primary key of the contact to get
	 * @return the contact
	 * @throws PortalException if a contact with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public Contact getContact(long contactId)
		throws PortalException, SystemException {
		return contactPersistence.findByPrimaryKey(contactId);
	}

	/**
	 * Gets a range of all the contacts.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of contacts to return
	 * @param end the upper bound of the range of contacts to return (not inclusive)
	 * @return the range of contacts
	 * @throws SystemException if a system exception occurred
	 */
	public List<Contact> getContacts(int start, int end)
		throws SystemException {
		return contactPersistence.findAll(start, end);
	}

	/**
	 * Gets the number of contacts.
	 *
	 * @return the number of contacts
	 * @throws SystemException if a system exception occurred
	 */
	public int getContactsCount() throws SystemException {
		return contactPersistence.countAll();
	}

	/**
	 * Updates the contact in the database. Also notifies the appropriate model listeners.
	 *
	 * @param contact the contact to update
	 * @return the contact that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public Contact updateContact(Contact contact) throws SystemException {
		contact.setNew(false);

		return contactPersistence.update(contact, true);
	}

	/**
	 * Updates the contact in the database. Also notifies the appropriate model listeners.
	 *
	 * @param contact the contact to update
	 * @param merge whether to merge the contact with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the contact that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public Contact updateContact(Contact contact, boolean merge)
		throws SystemException {
		contact.setNew(false);

		return contactPersistence.update(contact, merge);
	}

	/**
	 * Gets the campaign local service.
	 *
	 * @return the campaign local service
	 */
	public CampaignLocalService getCampaignLocalService() {
		return campaignLocalService;
	}

	/**
	 * Sets the campaign local service.
	 *
	 * @param campaignLocalService the campaign local service
	 */
	public void setCampaignLocalService(
		CampaignLocalService campaignLocalService) {
		this.campaignLocalService = campaignLocalService;
	}

	/**
	 * Gets the campaign persistence.
	 *
	 * @return the campaign persistence
	 */
	public CampaignPersistence getCampaignPersistence() {
		return campaignPersistence;
	}

	/**
	 * Sets the campaign persistence.
	 *
	 * @param campaignPersistence the campaign persistence
	 */
	public void setCampaignPersistence(CampaignPersistence campaignPersistence) {
		this.campaignPersistence = campaignPersistence;
	}

	/**
	 * Gets the contact local service.
	 *
	 * @return the contact local service
	 */
	public ContactLocalService getContactLocalService() {
		return contactLocalService;
	}

	/**
	 * Sets the contact local service.
	 *
	 * @param contactLocalService the contact local service
	 */
	public void setContactLocalService(ContactLocalService contactLocalService) {
		this.contactLocalService = contactLocalService;
	}

	/**
	 * Gets the contact persistence.
	 *
	 * @return the contact persistence
	 */
	public ContactPersistence getContactPersistence() {
		return contactPersistence;
	}

	/**
	 * Sets the contact persistence.
	 *
	 * @param contactPersistence the contact persistence
	 */
	public void setContactPersistence(ContactPersistence contactPersistence) {
		this.contactPersistence = contactPersistence;
	}

	/**
	 * Gets the send campaign local service.
	 *
	 * @return the send campaign local service
	 */
	public SendCampaignLocalService getSendCampaignLocalService() {
		return sendCampaignLocalService;
	}

	/**
	 * Sets the send campaign local service.
	 *
	 * @param sendCampaignLocalService the send campaign local service
	 */
	public void setSendCampaignLocalService(
		SendCampaignLocalService sendCampaignLocalService) {
		this.sendCampaignLocalService = sendCampaignLocalService;
	}

	/**
	 * Gets the send campaign persistence.
	 *
	 * @return the send campaign persistence
	 */
	public SendCampaignPersistence getSendCampaignPersistence() {
		return sendCampaignPersistence;
	}

	/**
	 * Sets the send campaign persistence.
	 *
	 * @param sendCampaignPersistence the send campaign persistence
	 */
	public void setSendCampaignPersistence(
		SendCampaignPersistence sendCampaignPersistence) {
		this.sendCampaignPersistence = sendCampaignPersistence;
	}

	/**
	 * Gets the newsletter log local service.
	 *
	 * @return the newsletter log local service
	 */
	public NewsletterLogLocalService getNewsletterLogLocalService() {
		return newsletterLogLocalService;
	}

	/**
	 * Sets the newsletter log local service.
	 *
	 * @param newsletterLogLocalService the newsletter log local service
	 */
	public void setNewsletterLogLocalService(
		NewsletterLogLocalService newsletterLogLocalService) {
		this.newsletterLogLocalService = newsletterLogLocalService;
	}

	/**
	 * Gets the newsletter log persistence.
	 *
	 * @return the newsletter log persistence
	 */
	public NewsletterLogPersistence getNewsletterLogPersistence() {
		return newsletterLogPersistence;
	}

	/**
	 * Sets the newsletter log persistence.
	 *
	 * @param newsletterLogPersistence the newsletter log persistence
	 */
	public void setNewsletterLogPersistence(
		NewsletterLogPersistence newsletterLogPersistence) {
		this.newsletterLogPersistence = newsletterLogPersistence;
	}

	/**
	 * Gets the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Gets the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Gets the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Gets the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Gets the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Gets the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Gets the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Gets the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query to perform
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = contactPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = CampaignLocalService.class)
	protected CampaignLocalService campaignLocalService;
	@BeanReference(type = CampaignPersistence.class)
	protected CampaignPersistence campaignPersistence;
	@BeanReference(type = ContactLocalService.class)
	protected ContactLocalService contactLocalService;
	@BeanReference(type = ContactPersistence.class)
	protected ContactPersistence contactPersistence;
	@BeanReference(type = SendCampaignLocalService.class)
	protected SendCampaignLocalService sendCampaignLocalService;
	@BeanReference(type = SendCampaignPersistence.class)
	protected SendCampaignPersistence sendCampaignPersistence;
	@BeanReference(type = NewsletterLogLocalService.class)
	protected NewsletterLogLocalService newsletterLogLocalService;
	@BeanReference(type = NewsletterLogPersistence.class)
	protected NewsletterLogPersistence newsletterLogPersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
}