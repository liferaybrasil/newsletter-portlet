/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.newsletter.model.impl;

import com.liferay.newsletter.model.NewsletterContent;
import com.liferay.newsletter.model.NewsletterContentModel;
import com.liferay.newsletter.model.NewsletterContentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the NewsletterContent service. Represents a row in the &quot;Newsletter_NewsletterContent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.newsletter.model.NewsletterContentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsletterContentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewsletterContentImpl
 * @see com.liferay.newsletter.model.NewsletterContent
 * @see com.liferay.newsletter.model.NewsletterContentModel
 * @generated
 */
@JSON(strict = true)
public class NewsletterContentModelImpl extends BaseModelImpl<NewsletterContent>
	implements NewsletterContentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a newsletter content model instance should use the {@link com.liferay.newsletter.model.NewsletterContent} interface instead.
	 */
	public static final String TABLE_NAME = "Newsletter_NewsletterContent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "contentId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "articleId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Newsletter_NewsletterContent (uuid_ VARCHAR(75) null,contentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,content VARCHAR(75) null,articleId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Newsletter_NewsletterContent";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.newsletter.model.NewsletterContent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.newsletter.model.NewsletterContent"),
			true);

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NewsletterContent toModel(NewsletterContentSoap soapModel) {
		NewsletterContent model = new NewsletterContentImpl();

		model.setUuid(soapModel.getUuid());
		model.setContentId(soapModel.getContentId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setContent(soapModel.getContent());
		model.setArticleId(soapModel.getArticleId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NewsletterContent> toModels(
		NewsletterContentSoap[] soapModels) {
		List<NewsletterContent> models = new ArrayList<NewsletterContent>(soapModels.length);

		for (NewsletterContentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public Class<?> getModelClass() {
		return NewsletterContent.class;
	}

	public String getModelClassName() {
		return NewsletterContent.class.getName();
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.newsletter.model.NewsletterContent"));

	public NewsletterContentModelImpl() {
	}

	public long getPrimaryKey() {
		return _contentId;
	}

	public void setPrimaryKey(long primaryKey) {
		setContentId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_contentId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getContentId() {
		return _contentId;
	}

	public void setContentId(long contentId) {
		_contentId = contentId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	public void setContent(String content) {
		_content = content;
	}

	@JSON
	public long getArticleId() {
		return _articleId;
	}

	public void setArticleId(long articleId) {
		_articleId = articleId;
	}

	@Override
	public NewsletterContent toEscapedModel() {
		if (isEscapedModel()) {
			return (NewsletterContent)this;
		}
		else {
			if (_escapedModelProxy == null) {
				_escapedModelProxy = (NewsletterContent)Proxy.newProxyInstance(_classLoader,
						_escapedModelProxyInterfaces,
						new AutoEscapeBeanHandler(this));
			}

			return _escapedModelProxy;
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					NewsletterContent.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		NewsletterContentImpl newsletterContentImpl = new NewsletterContentImpl();

		newsletterContentImpl.setUuid(getUuid());
		newsletterContentImpl.setContentId(getContentId());
		newsletterContentImpl.setGroupId(getGroupId());
		newsletterContentImpl.setCompanyId(getCompanyId());
		newsletterContentImpl.setUserId(getUserId());
		newsletterContentImpl.setUserName(getUserName());
		newsletterContentImpl.setCreateDate(getCreateDate());
		newsletterContentImpl.setModifiedDate(getModifiedDate());
		newsletterContentImpl.setTitle(getTitle());
		newsletterContentImpl.setContent(getContent());
		newsletterContentImpl.setArticleId(getArticleId());

		newsletterContentImpl.resetOriginalValues();

		return newsletterContentImpl;
	}

	public int compareTo(NewsletterContent newsletterContent) {
		long primaryKey = newsletterContent.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		NewsletterContent newsletterContent = null;

		try {
			newsletterContent = (NewsletterContent)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = newsletterContent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NewsletterContentModelImpl newsletterContentModelImpl = this;

		newsletterContentModelImpl._originalUuid = newsletterContentModelImpl._uuid;

		newsletterContentModelImpl._originalGroupId = newsletterContentModelImpl._groupId;

		newsletterContentModelImpl._setOriginalGroupId = false;
	}

	@Override
	public CacheModel<NewsletterContent> toCacheModel() {
		NewsletterContentCacheModel newsletterContentCacheModel = new NewsletterContentCacheModel();

		newsletterContentCacheModel.uuid = getUuid();

		String uuid = newsletterContentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			newsletterContentCacheModel.uuid = null;
		}

		newsletterContentCacheModel.contentId = getContentId();

		newsletterContentCacheModel.groupId = getGroupId();

		newsletterContentCacheModel.companyId = getCompanyId();

		newsletterContentCacheModel.userId = getUserId();

		newsletterContentCacheModel.userName = getUserName();

		String userName = newsletterContentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			newsletterContentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			newsletterContentCacheModel.createDate = createDate.getTime();
		}
		else {
			newsletterContentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			newsletterContentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			newsletterContentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		newsletterContentCacheModel.title = getTitle();

		String title = newsletterContentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			newsletterContentCacheModel.title = null;
		}

		newsletterContentCacheModel.content = getContent();

		String content = newsletterContentCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			newsletterContentCacheModel.content = null;
		}

		newsletterContentCacheModel.articleId = getArticleId();

		return newsletterContentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", contentId=");
		sb.append(getContentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", articleId=");
		sb.append(getArticleId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.newsletter.model.NewsletterContent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contentId</column-name><column-value><![CDATA[");
		sb.append(getContentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>articleId</column-name><column-value><![CDATA[");
		sb.append(getArticleId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NewsletterContent.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			NewsletterContent.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _contentId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _title;
	private String _content;
	private long _articleId;
	private transient ExpandoBridge _expandoBridge;
	private NewsletterContent _escapedModelProxy;
}